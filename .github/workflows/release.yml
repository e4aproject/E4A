# This is the single, definitive source of truth for releasing E4A packages.
# It uses a "Trust and Verify" model with full OIDC for both NPM and PyPI.
#
# 1. Pre-Flight Check: Verifies the build integrity on every push to main.
# 2. Release: Publishes to NPM and PyPI only after pre-flight succeeds.

name: Release & Publish (npm + PyPI via OIDC)

on:
  push:
    branches: [ main ]

jobs:
  pre-flight-check:
    name: Pre-Flight Build Verification
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Verify npm build
        run: |
          npm ci
          npm run build --if-present
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Verify Python build
        run: |
          python -m pip install --upgrade build twine
          python -m build
          python -m twine check dist/*

  release:
    name: Release to NPM and PyPI
    needs: pre-flight-check # Will only run if the pre-flight check succeeds.
    runs-on: ubuntu-latest
    permissions:
      contents: write      # To push releases, tags, etc.
      issues: write        # To post error comments if release fails.
      id-token: write      # Required for OIDC authentication.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release to analyze history.

      - name: Setup Node.js for OIDC Publishing
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Setup Python
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Sync version to pyproject.toml
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          VERSION=${{ steps.semantic.outputs.new_release_version }}
          echo "Syncing version $VERSION to pyproject.toml"
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml

      - name: Build Python package
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          python -m pip install --upgrade build
          python -m build

      - name: Publish Python package to PyPI via OIDC
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
